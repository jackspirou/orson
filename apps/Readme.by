{title Applications}

{center
 {b Applications}

 James B. Moen
 January 23, 2014}

{narrow
 {justify
   You know my methods.
   Apply them!}
 {right
  {goto doy1982 {c [doy 1982]}}}}

{left {b 0. Overview.}}

{justify
  This directory contains source files for some application programs.
  All are available under the terms of the {c Gnu} General Public License
  ({c gpl}) version 3.
  Some of these files use special characters.
  Without proper rendering support, you may see question marks, boxes, or other
  symbols in place of these characters.}

{left {b 1. Contents.}}

{justify
  The files in this directory are in three groups.
  Files in the first group contain Orson sources
  {goto moe2014 {c [moe 2014]}} for utility programs that can be installed and
  run as Unix shell commands.
  Section {goto install 2} explains how to install them.}

{narrow
 {layout
  {row
   {left {goto {t gas.os}}}
   {left \ \ \ Show the alignment and size of a {c Gnu} C type.}}
  {row
   {left {goto {t hb.os}}}
   {left \ \ \ Write simple statistics about source files.}}
  {row
   {left {goto {t jc.os}}}
   {left \ \ \ Justify comments with a given prefix.}}
  {row
   {left {goto {t nsurt.os}}}
   {left \ \ \ Copy a file, inserting the contents of other files.}}
  {row
   {left {goto {t olf.os}}}
   {left \ \ \ Write the titles of Orson library files.}}
  {row
   {left {goto {t prescript.os}}}
   {left \ \ \ Preprocess Unicode characters for {c gnu} Enscript.}}
  {row
   {left {goto {t series.os}}}
   {left \ \ \ Write a finite series of integers.}}
  {row
   {left {goto {t tabu.os}}\ }
   {left \ \ \ Write a series of names as a rectangular table.}}
  {row
   {left {goto urus.os {t urus.os}}}
   {left \ \ \ Obsolete cross reference generator for Orson sources.}}}}

{justify
  The program {i {c Gnu} Enscript} converts text files to PostScript for
  printing, but it currently supports only seven- and eight-bit character sets,
  like {c ascii} and {c iso} Latin-1.
  {i Prescript} is a preprocessor that lets Enscript print some (but not all)
  of the Unicode {goto uni2006 {c [uni 2006]}} characters that can appear in
  Orson sources.

  The current Orson cross reference generator for Orson source files is called
  {i Ox.}
  The program {i Urus} is an obsolete earlier version of Ox.
  Unlike Ox, Urus cross-references only plain, quoted, reserved, and secret
  names.
  It doesn't treat operator symbols as quoted names that should also be
  cross-referenced.
  Urus is included here only as an example of how to use predefined data
  structures from the Orson library.
  (A {i urus} is an extinct bovine mammal, {i Bos taurus primigenius,} of
  Northern Africa, Europe, and Western Asia {goto ahd1973 {c [ahd 1973],}}
  believed to be the ancestor of domestic cattle.)

  Files in the second group contain Orson sources that are tests or
  demonstrations.
  Some test data structures that are provided by the Orson library.}

{narrow
 {layout
  {row
   {left {goto {t chainsaw.os}}}
   {left \ \ \ Sort a linked chain of tuples.}}
  {row
   {left {goto {t hello.os}}}
   {left \ \ \ Write {i Hello, world!}}}
  {row
   {left {goto {t parser.os}}}
   {left \ \ \ Recursive descent parser for Orson.}}
  {row
   {left {goto {t partition.os}}}
   {left \ \ \ Write the partitions of a set.}}
  {row
   {left {goto {t permute.os}}}
   {left \ \ \ Write the permutations of an array.}}
  {row
   {left {goto {t sieve.os}}\ }
   {left \ \ \ The Sieve of Eratosthenes.}}
  {row
   {left {goto {t tak.os}}\ }
   {left \ \ \ Takeuchi function as a form.}}}}

{justify
  The program {i Parser} might be used as a starting point for programs like
  cross-referencers or pretty-printers that must parse Orson source programs.
  For example, the program Ox was written by modifying Parser.

  Files in the third group contain documentation, and some other things.
  Most are Unix manual pages for the Orson utility programs.}

{narrow
 {layout
  {row
   {left {goto ./Makefile {t Makefile}}}
   {left \ \ \ Compile, install, uninstall applications.}}
  {row
   {left {goto ./README {t README}}}
   {left \ \ \ Short text version of {t Readme.html}.}}
  {row
   {left {goto Readme.by {t Readme.by\ \ \ }}}
   {left \ \ \ Bracy source for {t Readme.html}.}}
  {row
   {left {goto {t Readme.html}}}
   {left \ \ \ What you're reading now.}}
  {row
   {left {goto ./dotEmacs {t dotEmacs}}}
   {left \ \ \ Customization file for {c Gnu} Emacs.}}
  {row
   {left {goto {t gas.1}}}
   {left \ \ \ Manual page for Gas.}}
  {row
   {left {goto {t hb.1}}}
   {left \ \ \ Manual page for {c Hb.}}}
  {row
   {left {goto {t jc.1}}}
   {left \ \ \ Manual page for {c Jc.}}}
  {row
   {left {goto {t prescript.1}}}
   {left \ \ \ Manual page for Prescript.}}
  {row
   {left {goto {t series.1}}}
   {left \ \ \ Manual page for Series.}}
  {row
   {left {goto {t tabu.1}}}
   {left \ \ \ Manual page for Tabu.}}
  {row
   {left {goto {t urus.1}}}
   {left \ \ \ Manual page for Urus.}}}}

{justify
  As mentioned before, Orson source programs can use some Unicode characters as
  operators.
  The file {i dotEmacs} makes it allegedly easy to enter such characters from
  a standard {c us} keyboard, using the {c Gnu} Emacs text editor
  {goto lew2000 {c [lew 2000].}}}

{label install}
{left {b 2. Installing.}}

{justify
  All the programs in this directory are installed by a single Unix
  {i makefile} {goto sta2010 {c [sta 2010].}}
  The next few sections explain how this makefile compiles, installs, and
  uninstalls programs.
  I assume only a minimal knowledge of Unix, and that an Orson compiler is
  already installed.
  Readers who are familiar with Unix can skip section {goto root 2.1} and skim
  the rest.}

{label root}
{left {b 2.1. Root.}}

{justify
  Unix systems have a special user (sometimes called the {i superuser}) whose
  name is {i root.}
  The root user can do almost anything without the system objecting.
  If you're root, you can read any file, write any file, delete any file, and
  make files in any directory.
  You can become root if you have the right password.
  This is potentially dangerous, so you shouldn't become root unless you must,
  and even then you should stay root for as short a time as you can.

  You must become root to install the programs in this directory.
  This is because these programs must be placed in directories that you
  ordinarily aren't allowed to make files in.
  If you can't become root for some reason, or you don't want to, then you can
  still experiment with these programs without installing them.
  I'll explain how to do that in section {goto compile 2.4.}

  There are at least two different ways to become root.
  On some systems, you become root only for the duration of a single command.
  Suppose you want to execute the command {t tenhut} as root.
  Then you type {t sudo}\ {t tenhut} to the shell, and type a password.
  (I guess {t sudo} stands for {i su do,} or maybe it's a pun on the word
  {i pseudo.})
  The command {t sudo} doesn't explicitly put you into a new shell, it just
  executes {t tenhut} as if you're root.

  On other systems, you type {t su} to the shell, then type a password.
  (I guess {t su} stands for {i superuser.})
  On others, you type {t su}\ {t root}, or {t sudo}\ {t su}, or
  {t sudo}\ {t su}\ {t root}.
  This puts you into a new shell where you can type commands that are executed
  as if you're root.
  When you're done, you exit the new shell by typing the command {t exit} or by
  typing the character {i control-D.}

  The commands {t sudo} and {t su} may remember the root password for a short
  time, so you don't have to keep typing it if you do several {t sudo}'s or
  {t su}'s one after the other.
  You can get more information about {t sudo} and {t su} by typing the commands
  {t man}\ {t sudo} and {t man}\ {t su} to the shell.}

{left {b 2.2. Installing.}}

{justify
  To install a program from this directory, first read {t Makefile}, and
  satisfy yourself that it won't do anything bad.
  Then execute the command {t make}\ {t install}\ {t program=}{i p} as root.
  (See section {goto root 2.1} if you don't know how to do that.)
  Here {i p} is the name of the program you want to install, without its
  suffix.
  For example, if you want to install the program {t gas.os}, then you'd type
  the command {t make}\ {t install}\ {t program=gas}.
  The {t make} command will write a list of the things it's doing to install
  the program {i p.}

  After the program is installed, you can run it.
  Just type its name to the shell, maybe followed by some options.
  If you don't know what its options are, then you can type {t man}\ {i p,}
  where {i p} is the name of the program.
  Some programs in this directory don't have their own manual pages.
  If you can't run the program, then something has gone wrong.}

{left {b 2.3. Uninstalling.}}

{justify
  If something did go wrong, or if you decide you didn't want to install the
  program after all, then you can uninstall it.
  Execute the command {t make}\ {t uninstall}\ {t program=}{i p} as root.
  As before, {i p} is the name of the program you want to uninstall, without
  its {t .os} suffix.
  For example, if you want to uninstall the program {t gas.os}, then you'd type
  the command {t make}\ {t uninstall}\ {t program=gas}.
  The {t make} command will write a list of the things it's doing to uninstall
  the program {i p.}}

{label compile}
{left {b 2.4. Rootlessness.}}

{justify
  What if you can't become root?
  Maybe you're a student working in a school lab, and you don't have the root
  password for the computer you're using.
  You can still compile and run these programs.
  Just type the command {t make}\ {t compile}\ {t program=}{i p,} without
  becoming root first.
  For example, if you want to compile the program {t gas.os}, then you'd type
  the command {t make}\ {t install}\ {t program=gas}.
  The {t make} command will write a list of the things it's doing to compile
  the program {i p.}

  Now you can run the program by typing {t ./}{i p} (that's {i dot slash pee}),
  maybe followed by some options.
  You can also read the manual page for the program {i p} by typing the
  command {t man}\ {t -l}\ {i p}{t .1}
  (that's {i man space dash ell space pee dot one}).
  Some programs in this directory don't have their own manual pages.}
 
{rule}

{center {b References}}

{layout
 {row
  {left
   {label ahd1973}
   {c [ahd\ 1973]\ \ }}
  {justify
    {i American Heritage Dictionary.}
    William Morris, Editor.
    American Heritage Publishing Company.
    New York, New York.
    1973.
    Pages 87, 1409.}}

 {row {left \ } {left \ }}

 {row
  {left
   {label doy1982}
   {c [doy\ 1982]\ \ }}
  {justify
    Arthur Conan Doyle.
    {i The Hound of the Baskervilles.}
    In {i The Original Illustrated Sherlock Holmes.}
    Castle.
    Secaucus, New Jersey.
    1982.
    Page 344.}}

 {row {left \ } {left \ }}

 {row
  {left
   {label lew2000}
   {c [lew\ 2000]\ \ }}
  {justify
    Bill Lewis, Dan LaLiberte, Richard Stallman, the {c Gnu} Manual Group.
    {i {c Gnu} Emacs Lisp Reference Manual.}
    Free Software Foundation.
    Boston, Massachusetts.
    2000.}}

 {row {left \ } {left \ }}

 {row
  {left
   {label moe2014}
   {c [moe\ 2014]\ \ }}
  {justify
    James B. Moen.
    ``Revised⁻¹ Report on the Algorithmic Language Orson.''
    Unpublished technical report.
    2014.}}

 {row {left \ } {left \ }}

 {row
  {left
   {label sta2010}
   {c [sta 2010]\ \ }}
  {justify
    Richard M. Stallman, Ronald McGrath, Paul D. Smith.
    ``{c Gnu} Make: A Program for Directing Recompilation.''
    Edition 0.71.
    Free Software Foundation.
    Boston, Massachusetts.
    July 19, 2010.}}

 {row {left \ } {left \ }}

 {row
  {left
   {label uni2006}
   {c [uni\ 2006]\ \ }}
  {justify
    The Unicode Consortium.
    {i The Unicode Standard, Version 5.0.}
    Fifth Edition.
    Addison-Wesley Professional.
    Reading, Massachusetts.
    2006.}}}
