.TH TLH 1 "December 4, 2013"
.DD December 4, 2013

.SH NAME
tlh - Make a two-level perfect hash method for a set of string keys.

.SH SYNOPSIS
.B tlh\c
 [\c
.BI -p \ modulus\c
] [\c
.BI -s \ modulus\c
] \c
.RI [ file ...\c
]

.SH DESCRIPTION
.B Tlh
finds a hash method (if it exists) for a set of strings.
The hash method is written in Orson.
It accepts a string argument and returns an index into an array where
information about the string can be found.
A hash method is
.I perfect
if no two strings from the set get the same index (called a
.I collision\c
\&).
It is
.I minimal
if the array has no unused elements.
.B Tlh\c
\&'s
methods are perfect but not necessarily minimal.

.PP
.B Tlh
finds
.I two level
hash methods that work in the following way.
Each hash method first converts its string to an arbitrary nonnegative integer,
then
.B mod\c
s it by a positive integer
.I primary modulus
to get an index.
Next, it uses the index to get a
.I secondary modulus
from an array
.I secondaries
and an integer
.I offset
from an array
.I offsets\c
\&.
Finally, it
.B mod\c
s the integer by the secondary modulus, and adds the offset to the result, to
obtain the final index.

.PP
.B Tlh
obtains keys from files whose paths are passed to it on the command line.
If
.B tlh
is given no paths on the command line, then it does nothing.
Each file must contain one key per line, a string without quotes or other
delimiters.
Blanks are significant, but empty lines are ignored.
For each file,
.B tlh
prints the following to stdout.

.IP \(bu 2
An Orson equate that defines the form "\ {}": this is the method that converts
a string key to an arbitrary integer.

.IP \(bu 2
An Orson equate that defines the form
.I hash\c
\&: this is the hash method.
It uses a
.I case
clause to represent
.I secondaries
and 
.I offsets\c
\&.

.IP \(bu 2
An Orson equate that defines the form
.I makeSecondary\c
\&:
this returns the final array of strings.

.PP
.B Tlh
recognizes the following options.
Arguments to any option may be separated from it by blanks.
If an option doesn't appear on the command line, then the option's default
takes effect.

.TP
.BI -p \ modulus
Primary modulus.
Establish
.I modulus
as the maximum primary modulus that will be tried when searching for a hash
method.
It must be greater than 0.
The default is 100.

.TP
.BI -s \ modulus
Secondary modulus.
Establish
.I modulus
as the maximum secondary modulus that will be tried when searching for a hash
method.
It must be greater than 0.
The default is 100.

.PP
If "\ {}" converts two string keys to the same integer, before
.B tlh
even starts searching for a hash method, then a message is written to stdout,
saying that there was a collision involving the first such key.
If
.B tlh
couldn't find a perfect hash method for the keys for some other reason, then
nothing is written.
However,
.B tlh
may be still be able to find a perfect hash method if the maximum primary and
secondary moduli are changed using the
.B -p
and
.B -s
options.

.SH BUGS
When trying to find the best hash method,
.B tlh
does not take the size of the primary table into account, only that of the
secondary table.

.PP
.B Tlh
does not necessarily find better hash methods (with smaller secondary tables)
if the maximum primary and secondary moduli are made larger.

.SH COPYING
Copyright (C) 2013 James B. Moen.
Permission is granted to copy, distribute, and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license may be obtained at <http://fsf.org/>.

.SH VERSION
Version 0.2.

.SH REFERENCES
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein.
.I Introduction to Algorithms.
Second Edition.
MIT Press.
Cambridge, Massachusetts.
2003.
Pages 245-249.

.PP
Michael L. Friedman, Janos Komlos, Endre Szermeredi.
"Storing a Sparse Table with O(1) Worst Case Access Time."
.I Journal of the ACM.
Volume 31.
Number 3.
1984.
Pages 538-544. 

.PP
James B. Moen.
"The Unrevised Report on the Algorithmic Language Orson."
Unpublished technical report.
2013.

.SH AUTHOR
James B. Moen

.SH SEE ALSO
.B orson\c
(1).